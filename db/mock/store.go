// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adam-macioszek/rezy/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/adam-macioszek/rezy/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *MockStore) CreateReservation(arg0 context.Context, arg1 db.CreateReservationParams) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockStoreMockRecorder) CreateReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockStore)(nil).CreateReservation), arg0, arg1)
}

// DeleteReservation mocks base method.
func (m *MockStore) DeleteReservation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservation indicates an expected call of DeleteReservation.
func (mr *MockStoreMockRecorder) DeleteReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockStore)(nil).DeleteReservation), arg0, arg1)
}

// GetOptimizedReservation mocks base method.
func (m *MockStore) GetOptimizedReservation(arg0 context.Context, arg1 db.GetOptimizedReservationParams) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptimizedReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptimizedReservation indicates an expected call of GetOptimizedReservation.
func (mr *MockStoreMockRecorder) GetOptimizedReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptimizedReservation", reflect.TypeOf((*MockStore)(nil).GetOptimizedReservation), arg0, arg1)
}

// GetReservation mocks base method.
func (m *MockStore) GetReservation(arg0 context.Context, arg1 int64) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockStoreMockRecorder) GetReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockStore)(nil).GetReservation), arg0, arg1)
}

// ListAvailableReservations mocks base method.
func (m *MockStore) ListAvailableReservations(arg0 context.Context, arg1 db.ListAvailableReservationsParams) ([]db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableReservations", arg0, arg1)
	ret0, _ := ret[0].([]db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableReservations indicates an expected call of ListAvailableReservations.
func (mr *MockStoreMockRecorder) ListAvailableReservations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableReservations", reflect.TypeOf((*MockStore)(nil).ListAvailableReservations), arg0, arg1)
}

// ListReservations mocks base method.
func (m *MockStore) ListReservations(arg0 context.Context, arg1 db.ListReservationsParams) ([]db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservations", arg0, arg1)
	ret0, _ := ret[0].([]db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations.
func (mr *MockStoreMockRecorder) ListReservations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockStore)(nil).ListReservations), arg0, arg1)
}

// MakeReservation mocks base method.
func (m *MockStore) MakeReservation(arg0 context.Context, arg1 db.MakeReservationParams) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeReservation indicates an expected call of MakeReservation.
func (mr *MockStoreMockRecorder) MakeReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeReservation", reflect.TypeOf((*MockStore)(nil).MakeReservation), arg0, arg1)
}

// UpdateReservation mocks base method.
func (m *MockStore) UpdateReservation(arg0 context.Context, arg1 db.UpdateReservationParams) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReservation indicates an expected call of UpdateReservation.
func (mr *MockStoreMockRecorder) UpdateReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReservation", reflect.TypeOf((*MockStore)(nil).UpdateReservation), arg0, arg1)
}
