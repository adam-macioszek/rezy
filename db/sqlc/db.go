// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createReservationStmt, err = db.PrepareContext(ctx, createReservation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReservation: %w", err)
	}
	if q.deleteReservationStmt, err = db.PrepareContext(ctx, deleteReservation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReservation: %w", err)
	}
	if q.getOptimizedReservationStmt, err = db.PrepareContext(ctx, getOptimizedReservation); err != nil {
		return nil, fmt.Errorf("error preparing query GetOptimizedReservation: %w", err)
	}
	if q.getReservationStmt, err = db.PrepareContext(ctx, getReservation); err != nil {
		return nil, fmt.Errorf("error preparing query GetReservation: %w", err)
	}
	if q.listAvailableReservationsStmt, err = db.PrepareContext(ctx, listAvailableReservations); err != nil {
		return nil, fmt.Errorf("error preparing query ListAvailableReservations: %w", err)
	}
	if q.listReservationsStmt, err = db.PrepareContext(ctx, listReservations); err != nil {
		return nil, fmt.Errorf("error preparing query ListReservations: %w", err)
	}
	if q.updateReservationStmt, err = db.PrepareContext(ctx, updateReservation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReservation: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createReservationStmt != nil {
		if cerr := q.createReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReservationStmt: %w", cerr)
		}
	}
	if q.deleteReservationStmt != nil {
		if cerr := q.deleteReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReservationStmt: %w", cerr)
		}
	}
	if q.getOptimizedReservationStmt != nil {
		if cerr := q.getOptimizedReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOptimizedReservationStmt: %w", cerr)
		}
	}
	if q.getReservationStmt != nil {
		if cerr := q.getReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReservationStmt: %w", cerr)
		}
	}
	if q.listAvailableReservationsStmt != nil {
		if cerr := q.listAvailableReservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAvailableReservationsStmt: %w", cerr)
		}
	}
	if q.listReservationsStmt != nil {
		if cerr := q.listReservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReservationsStmt: %w", cerr)
		}
	}
	if q.updateReservationStmt != nil {
		if cerr := q.updateReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReservationStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createReservationStmt         *sql.Stmt
	deleteReservationStmt         *sql.Stmt
	getOptimizedReservationStmt   *sql.Stmt
	getReservationStmt            *sql.Stmt
	listAvailableReservationsStmt *sql.Stmt
	listReservationsStmt          *sql.Stmt
	updateReservationStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createReservationStmt:         q.createReservationStmt,
		deleteReservationStmt:         q.deleteReservationStmt,
		getOptimizedReservationStmt:   q.getOptimizedReservationStmt,
		getReservationStmt:            q.getReservationStmt,
		listAvailableReservationsStmt: q.listAvailableReservationsStmt,
		listReservationsStmt:          q.listReservationsStmt,
		updateReservationStmt:         q.updateReservationStmt,
	}
}
